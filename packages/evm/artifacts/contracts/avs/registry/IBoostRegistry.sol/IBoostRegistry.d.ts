// This file was autogenerated by hardhat-viem, do not edit it.
// prettier-ignore
// tslint:disable
// eslint-disable

import type { Address } from "viem";
import type { GetContractReturnType } from "@nomicfoundation/hardhat-viem/types";
import "@nomicfoundation/hardhat-viem/types";

export interface IBoostRegistry$Type {
  "_format": "hh-sol-artifact-1",
  "contractName": "IBoostRegistry",
  "sourceName": "contracts/avs/registry/IBoostRegistry.sol",
  "abi": [
    {
      "inputs": [],
      "name": "InsufficientSignedStake",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidQuorum",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignedWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidThreshold",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustUpdateAllOperators",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSorted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OperatorAlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OperatorNotRegistered",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_old",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_new",
          "type": "uint256"
        }
      ],
      "name": "MinimumWeightUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_avs",
          "type": "address"
        }
      ],
      "name": "OperatorDeregistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_avs",
          "type": "address"
        }
      ],
      "name": "OperatorRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newWeight",
          "type": "uint256"
        }
      ],
      "name": "OperatorWeightUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "strategy",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "multiplier",
                  "type": "uint96"
                }
              ],
              "internalType": "struct StrategyParams[]",
              "name": "strategies",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Quorum",
          "name": "_old",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "strategy",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "multiplier",
                  "type": "uint96"
                }
              ],
              "internalType": "struct StrategyParams[]",
              "name": "strategies",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct Quorum",
          "name": "_new",
          "type": "tuple"
        }
      ],
      "name": "QuorumUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        }
      ],
      "name": "ThresholdWeightUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTotalWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalWeight",
          "type": "uint256"
        }
      ],
      "name": "TotalWeightUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMinimumWeight",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinimumWeight",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinimumWeight",
      "type": "event"
    }
  ],
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "linkReferences": {},
  "deployedLinkReferences": {}
}

declare module "@nomicfoundation/hardhat-viem/types" {
  export function deployContract(
    contractName: "IBoostRegistry",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<IBoostRegistry$Type["abi"]>>;
  export function deployContract(
    contractName: "contracts/avs/registry/IBoostRegistry.sol:IBoostRegistry",
    constructorArgs?: [],
    config?: DeployContractConfig
  ): Promise<GetContractReturnType<IBoostRegistry$Type["abi"]>>;

  export function sendDeploymentTransaction(
    contractName: "IBoostRegistry",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<IBoostRegistry$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;
  export function sendDeploymentTransaction(
    contractName: "contracts/avs/registry/IBoostRegistry.sol:IBoostRegistry",
    constructorArgs?: [],
    config?: SendDeploymentTransactionConfig
  ): Promise<{
    contract: GetContractReturnType<IBoostRegistry$Type["abi"]>;
    deploymentTransaction: GetTransactionReturnType;
  }>;

  export function getContractAt(
    contractName: "IBoostRegistry",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<IBoostRegistry$Type["abi"]>>;
  export function getContractAt(
    contractName: "contracts/avs/registry/IBoostRegistry.sol:IBoostRegistry",
    address: Address,
    config?: GetContractAtConfig
  ): Promise<GetContractReturnType<IBoostRegistry$Type["abi"]>>;
}
